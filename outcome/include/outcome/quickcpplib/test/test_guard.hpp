
#undef BOOST_AFIO_V1_STL11_IMPL
#undef BOOST_AFIO_V1_FILESYSTEM_IMPL
#undef BOOST_AFIO_V1_ASIO_IMPL
#undef BOOST_AFIO_V1
#undef BOOST_AFIO_V1_NAMESPACE
#undef BOOST_AFIO_V1_NAMESPACE_BEGIN
#undef BOOST_AFIO_V1_NAMESPACE_END

#include "include/import.h"

// Default to the C++ 11 STL for atomic, chrono, mutex and thread
#if defined(BOOST_AFIO_USE_BOOST_THREAD) && BOOST_AFIO_USE_BOOST_THREAD
# define BOOST_AFIO_V1_STL11_IMPL boost
#else
# define BOOST_AFIO_V1_STL11_IMPL std
# ifndef BOOST_AFIO_USE_BOOST_THREAD
#  define BOOST_AFIO_USE_BOOST_THREAD 0
# endif
#endif
// Default to the C++ 11 STL if on MSVC (Dinkumware ships a copy), else Boost
#ifndef BOOST_AFIO_USE_BOOST_FILESYSTEM
# if _MSC_VER >= 1900  // >= VS 14
#  define BOOST_AFIO_USE_BOOST_FILESYSTEM 0
# endif
#endif
#ifndef BOOST_AFIO_USE_BOOST_FILESYSTEM
# define BOOST_AFIO_USE_BOOST_FILESYSTEM 1
#endif
#if BOOST_AFIO_USE_BOOST_FILESYSTEM
# define BOOST_AFIO_V1_FILESYSTEM_IMPL boost
# define BOOST_AFIO_USE_LEGACY_FILESYSTEM_SEMANTICS 1
#else
# define BOOST_AFIO_V1_FILESYSTEM_IMPL std
#endif
// If building standalone, use a local asio, else Boost
#ifndef BOOST_AFIO_V1_ASIO_IMPL
# if ASIO_STANDALONE
#  define BOOST_AFIO_V1_ASIO_IMPL asio
# else
#  define BOOST_AFIO_V1_ASIO_IMPL boost
# endif
#endif

#define BOOST_AFIO_V1 (boost), (afio), (BOOST_BINDLIB_NAMESPACE_VERSION(v1, BOOST_AFIO_V1_STL11_IMPL, BOOST_AFIO_V1_FILESYSTEM_IMPL, BOOST_AFIO_V1_ASIO_IMPL), inline)
#define BOOST_AFIO_V1_NAMESPACE       BOOST_BINDLIB_NAMESPACE      (BOOST_AFIO_V1)
#define BOOST_AFIO_V1_NAMESPACE_BEGIN BOOST_BINDLIB_NAMESPACE_BEGIN(BOOST_AFIO_V1)
#define BOOST_AFIO_V1_NAMESPACE_END   BOOST_BINDLIB_NAMESPACE_END  (BOOST_AFIO_V1)

// Autogenerated
#include "test_guard2.hpp"
#ifdef BOOST_AFIO_NEED_DEFINE

BOOST_AFIO_V1_NAMESPACE_BEGIN

BOOST_BINDLIB_DECLARE(BOOST_AFIO_V1, BOOST_AFIO_NEED_DEFINE_DESCRIPTION)

int foo()
{
  return 1;
}

BOOST_AFIO_V1_NAMESPACE_END

#endif
