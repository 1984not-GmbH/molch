/* atomic_map.hpp
Maps in an atomic from somewhere
(C) 2014 Niall Douglas http://www.nedprod.com/
File Created: Aug 2014


Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.
*/

#if !defined(BOOST_ATOMIC_MAP_START_NAMESPACE) || !defined(BOOST_ATOMIC_MAP_END_NAMESPACE)
#error You need to define BOOST_ATOMIC_MAP_START_NAMESPACE and BOOST_ATOMIC_MAP_END_NAMESPACE to use this header file
#endif

#if !defined(BOOST_USE_BOOST_ATOMIC) && defined(BOOST_NO_CXX11_HDR_ATOMIC)
# define BOOST_USE_BOOST_ATOMIC
#endif

#ifdef BOOST_USE_BOOST_ATOMIC
# include <boost/atomic.hpp>
#else
# include <atomic>
#endif
#include "boostmacros.hpp"

BOOST_ATOMIC_MAP_START_NAMESPACE

// Map in an atomic implementation
template <class T>
class atomic
#ifdef BOOST_SPINLOCK_USE_BOOST_ATOMIC
  : public boost::atomic<T>
{
  typedef boost::atomic<T> Base;
#else
  : public std::atomic<T>
{
  typedef std::atomic<T> Base;
#endif

public:
  atomic() : Base() {}
  BOOST_CONSTEXPR atomic(T v) BOOST_NOEXCEPT : Base(std::forward<T>(v)) {}

#ifdef BOOST_NO_CXX11_DELETED_FUNCTIONS
  //private:
  atomic(const Base &) /* =delete */;
#else
  atomic(const Base &) = delete;
#endif
  using Base::operator=;
};//end boost::afio::atomic
#ifdef BOOST_SPINLOCK_USE_BOOST_ATOMIC
using boost::memory_order;
using boost::memory_order_relaxed;
using boost::memory_order_consume;
using boost::memory_order_acquire;
using boost::memory_order_release;
using boost::memory_order_acq_rel;
using boost::memory_order_seq_cst;
#else
using std::memory_order;
using std::memory_order_relaxed;
using std::memory_order_consume;
using std::memory_order_acquire;
using std::memory_order_release;
using std::memory_order_acq_rel;
using std::memory_order_seq_cst;
#endif

BOOST_ATOMIC_MAP_END_NAMESPACE

#undef BOOST_ATOMIC_MAP_START_NAMESPACE
#undef BOOST_ATOMIC_MAP_END_NAMESPACE
