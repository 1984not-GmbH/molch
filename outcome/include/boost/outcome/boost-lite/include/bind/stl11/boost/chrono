/* This is an automatically generated bindings file. Don't modify it! */
#ifndef BOOSTLITE_BIND_BOOST_CHRONO_HPP
#define BOOSTLITE_BIND_BOOST_CHRONO_HPP

#include <boost/chrono.hpp>
namespace boost_lite { namespace bind { namespace boost { namespace chrono {
extern const char *boost_bindlib_in;
// begin hours
#ifdef BOOST_STL11_CHRONO_MAP_NO_HOURS
#undef BOOST_STL11_CHRONO_MAP_NO_HOURS
#else
using ::boost::chrono::hours;
#endif
// end hours
// begin minutes
#ifdef BOOST_STL11_CHRONO_MAP_NO_MINUTES
#undef BOOST_STL11_CHRONO_MAP_NO_MINUTES
#else
using ::boost::chrono::minutes;
#endif
// end minutes
// begin milliseconds
#ifdef BOOST_STL11_CHRONO_MAP_NO_MILLISECONDS
#undef BOOST_STL11_CHRONO_MAP_NO_MILLISECONDS
#else
using ::boost::chrono::milliseconds;
#endif
// end milliseconds
// begin seconds
#ifdef BOOST_STL11_CHRONO_MAP_NO_SECONDS
#undef BOOST_STL11_CHRONO_MAP_NO_SECONDS
#else
using ::boost::chrono::seconds;
#endif
// end seconds
// begin nanoseconds
#ifdef BOOST_STL11_CHRONO_MAP_NO_NANOSECONDS
#undef BOOST_STL11_CHRONO_MAP_NO_NANOSECONDS
#else
using ::boost::chrono::nanoseconds;
#endif
// end nanoseconds
// begin duration
#ifdef BOOST_STL11_CHRONO_MAP_NO_DURATION
#undef BOOST_STL11_CHRONO_MAP_NO_DURATION
#else
template<class Rep, class Period> using duration = ::boost::chrono::duration<Rep, Period>;
#endif
// end duration
// begin treat_as_floating_point
#ifdef BOOST_STL11_CHRONO_MAP_NO_TREAT_AS_FLOATING_POINT
#undef BOOST_STL11_CHRONO_MAP_NO_TREAT_AS_FLOATING_POINT
#else
template<class Rep> using treat_as_floating_point = ::boost::chrono::treat_as_floating_point<Rep>;
#endif
// end treat_as_floating_point
// begin microseconds
#ifdef BOOST_STL11_CHRONO_MAP_NO_MICROSECONDS
#undef BOOST_STL11_CHRONO_MAP_NO_MICROSECONDS
#else
using ::boost::chrono::microseconds;
#endif
// end microseconds
// begin duration_cast
#ifdef BOOST_STL11_CHRONO_MAP_NO_DURATION_CAST
#undef BOOST_STL11_CHRONO_MAP_NO_DURATION_CAST
#else
using ::boost::chrono::duration_cast;
#endif
// end duration_cast
// begin time_point
#ifdef BOOST_STL11_CHRONO_MAP_NO_TIME_POINT
#undef BOOST_STL11_CHRONO_MAP_NO_TIME_POINT
#else
template<class Clock, class Duration> using time_point = ::boost::chrono::time_point<Clock, Duration>;
#endif
// end time_point
// begin time_point_cast
#ifdef BOOST_STL11_CHRONO_MAP_NO_TIME_POINT_CAST
#undef BOOST_STL11_CHRONO_MAP_NO_TIME_POINT_CAST
#else
using ::boost::chrono::time_point_cast;
#endif
// end time_point_cast
// begin system_clock
#ifdef BOOST_STL11_CHRONO_MAP_NO_SYSTEM_CLOCK
#undef BOOST_STL11_CHRONO_MAP_NO_SYSTEM_CLOCK
#else
using system_clock = ::boost::chrono::system_clock;
#endif
// end system_clock
// begin high_resolution_clock
#ifdef BOOST_STL11_CHRONO_MAP_NO_HIGH_RESOLUTION_CLOCK
#undef BOOST_STL11_CHRONO_MAP_NO_HIGH_RESOLUTION_CLOCK
#else
using ::boost::chrono::high_resolution_clock;
#endif
// end high_resolution_clock
// begin steady_clock
#ifdef BOOST_STL11_CHRONO_MAP_NO_STEADY_CLOCK
#undef BOOST_STL11_CHRONO_MAP_NO_STEADY_CLOCK
#else
using steady_clock = ::boost::chrono::steady_clock;
#endif
// end steady_clock
// begin duration_values
#ifdef BOOST_STL11_CHRONO_MAP_NO_DURATION_VALUES
#undef BOOST_STL11_CHRONO_MAP_NO_DURATION_VALUES
#else
template<class Rep> using duration_values = ::boost::chrono::duration_values<Rep>;
#endif
// end duration_values
} } } } // namespace

#endif
