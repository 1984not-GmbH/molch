/* This is an automatically generated bindings file. Don't modify it! */
#ifndef BOOSTLITE_BIND_STD_REGEX_HPP
#define BOOSTLITE_BIND_STD_REGEX_HPP

#include <regex>
namespace boost_lite { namespace bind { namespace std { namespace regex {
extern const char *boost_bindlib_in;
// begin regex_token_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_TOKEN_ITERATOR
#else
template<class _Bi_iter, class _Ch_type, class _Rx_traits> using regex_token_iterator = ::std::regex_token_iterator<_Bi_iter, _Ch_type, _Rx_traits>;
#endif
// end regex_token_iterator
// begin wsregex_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_WSREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WSREGEX_ITERATOR
#else
using ::std::wsregex_iterator;
#endif
// end wsregex_iterator
// begin regex_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_ITERATOR
#else
template<class _Bi_iter, class _Ch_type, class _Rx_traits> using regex_iterator = ::std::regex_iterator<_Bi_iter, _Ch_type, _Rx_traits>;
#endif
// end regex_iterator
// begin regex_replace
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_REPLACE
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_REPLACE
#else
using ::std::regex_replace;
#endif
// end regex_replace
// begin wssub_match
#ifdef BOOST_STL11_REGEX_MAP_NO_WSSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_WSSUB_MATCH
#else
using ::std::wssub_match;
#endif
// end wssub_match
// begin wcsub_match
#ifdef BOOST_STL11_REGEX_MAP_NO_WCSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_WCSUB_MATCH
#else
using ::std::wcsub_match;
#endif
// end wcsub_match
// begin ssub_match
#ifdef BOOST_STL11_REGEX_MAP_NO_SSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_SSUB_MATCH
#else
using ::std::ssub_match;
#endif
// end ssub_match
// begin csub_match
#ifdef BOOST_STL11_REGEX_MAP_NO_CSUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_CSUB_MATCH
#else
using ::std::csub_match;
#endif
// end csub_match
// begin regex
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_REGEX
#else
using ::std::regex;
#endif
// end regex
// begin regex_traits
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_TRAITS
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_TRAITS
#else
template<class _Ch_type> using regex_traits = ::std::regex_traits<_Ch_type>;
#endif
// end regex_traits
// begin regex_error
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_ERROR
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_ERROR
#else
using regex_error = ::std::regex_error;
#endif
// end regex_error
// begin wsregex_token_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_WSREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WSREGEX_TOKEN_ITERATOR
#else
using ::std::wsregex_token_iterator;
#endif
// end wsregex_token_iterator
// begin cregex_token_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_CREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_CREGEX_TOKEN_ITERATOR
#else
using ::std::cregex_token_iterator;
#endif
// end cregex_token_iterator
// begin wcregex_token_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_WCREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WCREGEX_TOKEN_ITERATOR
#else
using ::std::wcregex_token_iterator;
#endif
// end wcregex_token_iterator
// begin sregex_token_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_SREGEX_TOKEN_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_SREGEX_TOKEN_ITERATOR
#else
using ::std::sregex_token_iterator;
#endif
// end sregex_token_iterator
// begin cmatch
#ifdef BOOST_STL11_REGEX_MAP_NO_CMATCH
#undef BOOST_STL11_REGEX_MAP_NO_CMATCH
#else
using ::std::cmatch;
#endif
// end cmatch
// begin regex_match
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_MATCH
#else
using ::std::regex_match;
#endif
// end regex_match
// begin cregex_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_CREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_CREGEX_ITERATOR
#else
using ::std::cregex_iterator;
#endif
// end cregex_iterator
// begin match_results
#ifdef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#undef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#else
template<class _Bi_iter, class _Alloc> using match_results = ::std::match_results<_Bi_iter, _Alloc>;
#endif
// end match_results
// begin match_results
#ifdef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#undef BOOST_STL11_REGEX_MAP_NO_MATCH_RESULTS
#else
template<class type_parameter_0_0, class type_parameter_0_1> using match_results = ::std::match_results<type_parameter_0_0, type_parameter_0_1>;
#endif
// end match_results
// begin wcregex_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_WCREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_WCREGEX_ITERATOR
#else
using ::std::wcregex_iterator;
#endif
// end wcregex_iterator
// begin sregex_iterator
#ifdef BOOST_STL11_REGEX_MAP_NO_SREGEX_ITERATOR
#undef BOOST_STL11_REGEX_MAP_NO_SREGEX_ITERATOR
#else
using ::std::sregex_iterator;
#endif
// end sregex_iterator
// begin wregex
#ifdef BOOST_STL11_REGEX_MAP_NO_WREGEX
#undef BOOST_STL11_REGEX_MAP_NO_WREGEX
#else
using ::std::wregex;
#endif
// end wregex
// begin wsmatch
#ifdef BOOST_STL11_REGEX_MAP_NO_WSMATCH
#undef BOOST_STL11_REGEX_MAP_NO_WSMATCH
#else
using ::std::wsmatch;
#endif
// end wsmatch
// begin wcmatch
#ifdef BOOST_STL11_REGEX_MAP_NO_WCMATCH
#undef BOOST_STL11_REGEX_MAP_NO_WCMATCH
#else
using ::std::wcmatch;
#endif
// end wcmatch
// begin regex_search
#ifdef BOOST_STL11_REGEX_MAP_NO_REGEX_SEARCH
#undef BOOST_STL11_REGEX_MAP_NO_REGEX_SEARCH
#else
using ::std::regex_search;
#endif
// end regex_search
// begin sub_match
#ifdef BOOST_STL11_REGEX_MAP_NO_SUB_MATCH
#undef BOOST_STL11_REGEX_MAP_NO_SUB_MATCH
#else
template<class _BiIter> using sub_match = ::std::sub_match<_BiIter>;
#endif
// end sub_match
// begin basic_regex
#ifdef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#else
template<class _Ch_type, class _Rx_traits> using basic_regex = ::std::basic_regex<_Ch_type, _Rx_traits>;
#endif
// end basic_regex
// begin basic_regex
#ifdef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#undef BOOST_STL11_REGEX_MAP_NO_BASIC_REGEX
#else
template<class type_parameter_0_0, class type_parameter_0_1> using basic_regex = ::std::basic_regex<type_parameter_0_0, type_parameter_0_1>;
#endif
// end basic_regex
// begin smatch
#ifdef BOOST_STL11_REGEX_MAP_NO_SMATCH
#undef BOOST_STL11_REGEX_MAP_NO_SMATCH
#else
using ::std::smatch;
#endif
// end smatch
} } } } // namespace

#endif
