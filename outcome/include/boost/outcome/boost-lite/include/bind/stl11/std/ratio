/* This is an automatically generated bindings file. Don't modify it! */
#ifndef BOOSTLITE_BIND_STD_RATIO_HPP
#define BOOSTLITE_BIND_STD_RATIO_HPP

#include <ratio>
namespace boost_lite { namespace bind { namespace std { namespace ratio {
extern const char *boost_bindlib_in;
// begin peta
#ifdef BOOST_STL11_RATIO_MAP_NO_PETA
#undef BOOST_STL11_RATIO_MAP_NO_PETA
#else
using ::std::peta;
#endif
// end peta
// begin tera
#ifdef BOOST_STL11_RATIO_MAP_NO_TERA
#undef BOOST_STL11_RATIO_MAP_NO_TERA
#else
using ::std::tera;
#endif
// end tera
// begin hecto
#ifdef BOOST_STL11_RATIO_MAP_NO_HECTO
#undef BOOST_STL11_RATIO_MAP_NO_HECTO
#else
using ::std::hecto;
#endif
// end hecto
// begin deci
#ifdef BOOST_STL11_RATIO_MAP_NO_DECI
#undef BOOST_STL11_RATIO_MAP_NO_DECI
#else
using ::std::deci;
#endif
// end deci
// begin centi
#ifdef BOOST_STL11_RATIO_MAP_NO_CENTI
#undef BOOST_STL11_RATIO_MAP_NO_CENTI
#else
using ::std::centi;
#endif
// end centi
// begin nano
#ifdef BOOST_STL11_RATIO_MAP_NO_NANO
#undef BOOST_STL11_RATIO_MAP_NO_NANO
#else
using ::std::nano;
#endif
// end nano
// begin femto
#ifdef BOOST_STL11_RATIO_MAP_NO_FEMTO
#undef BOOST_STL11_RATIO_MAP_NO_FEMTO
#else
using ::std::femto;
#endif
// end femto
// begin atto
#ifdef BOOST_STL11_RATIO_MAP_NO_ATTO
#undef BOOST_STL11_RATIO_MAP_NO_ATTO
#else
using ::std::atto;
#endif
// end atto
// begin ratio_greater_equal
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_GREATER_EQUAL
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_GREATER_EQUAL
#else
template<class _R1, class _R2> using ratio_greater_equal = ::std::ratio_greater_equal<_R1, _R2>;
#endif
// end ratio_greater_equal
// begin pico
#ifdef BOOST_STL11_RATIO_MAP_NO_PICO
#undef BOOST_STL11_RATIO_MAP_NO_PICO
#else
using ::std::pico;
#endif
// end pico
// begin ratio_less
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_LESS
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_LESS
#else
template<class _R1, class _R2> using ratio_less = ::std::ratio_less<_R1, _R2>;
#endif
// end ratio_less
// begin ratio_not_equal
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_NOT_EQUAL
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_NOT_EQUAL
#else
template<class _R1, class _R2> using ratio_not_equal = ::std::ratio_not_equal<_R1, _R2>;
#endif
// end ratio_not_equal
// begin mega
#ifdef BOOST_STL11_RATIO_MAP_NO_MEGA
#undef BOOST_STL11_RATIO_MAP_NO_MEGA
#else
using ::std::mega;
#endif
// end mega
// begin milli
#ifdef BOOST_STL11_RATIO_MAP_NO_MILLI
#undef BOOST_STL11_RATIO_MAP_NO_MILLI
#else
using ::std::milli;
#endif
// end milli
// begin deca
#ifdef BOOST_STL11_RATIO_MAP_NO_DECA
#undef BOOST_STL11_RATIO_MAP_NO_DECA
#else
using ::std::deca;
#endif
// end deca
// begin ratio
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO
#undef BOOST_STL11_RATIO_MAP_NO_RATIO
#else
template<intmax_t _0, intmax_t _1> using ratio = ::std::ratio<_0, _1>;
#endif
// end ratio
// begin ratio_equal
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_EQUAL
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_EQUAL
#else
template<class _R1, class _R2> using ratio_equal = ::std::ratio_equal<_R1, _R2>;
#endif
// end ratio_equal
// begin micro
#ifdef BOOST_STL11_RATIO_MAP_NO_MICRO
#undef BOOST_STL11_RATIO_MAP_NO_MICRO
#else
using ::std::micro;
#endif
// end micro
// begin giga
#ifdef BOOST_STL11_RATIO_MAP_NO_GIGA
#undef BOOST_STL11_RATIO_MAP_NO_GIGA
#else
using ::std::giga;
#endif
// end giga
// begin kilo
#ifdef BOOST_STL11_RATIO_MAP_NO_KILO
#undef BOOST_STL11_RATIO_MAP_NO_KILO
#else
using ::std::kilo;
#endif
// end kilo
// begin ratio_less_equal
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_LESS_EQUAL
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_LESS_EQUAL
#else
template<class _R1, class _R2> using ratio_less_equal = ::std::ratio_less_equal<_R1, _R2>;
#endif
// end ratio_less_equal
// begin exa
#ifdef BOOST_STL11_RATIO_MAP_NO_EXA
#undef BOOST_STL11_RATIO_MAP_NO_EXA
#else
using ::std::exa;
#endif
// end exa
// begin ratio_greater
#ifdef BOOST_STL11_RATIO_MAP_NO_RATIO_GREATER
#undef BOOST_STL11_RATIO_MAP_NO_RATIO_GREATER
#else
template<class _R1, class _R2> using ratio_greater = ::std::ratio_greater<_R1, _R2>;
#endif
// end ratio_greater
} } } } // namespace

#endif
